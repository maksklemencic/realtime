// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String   @unique
  emailVerified   DateTime?
  bio             String?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])
  
  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]

  // User can have many posts
  posts           Post[]

  // User can have many comments
  comments        Comment[]

  // User can have many followers
  followers       Follower[] @relation("FollowersFollower")
  following       Follower[] @relation("FollowersFollowing")

  likes           Like[]

  groupsIds       String[] @db.ObjectId
  groups          Group[] @relation(fields: [groupsIds], references: [id])
  
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  
  messagesIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
  
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id])

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Group {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  image String?
  createdAt DateTime @default(now())

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
}

model Post {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Post belongs to a user
  author          User @relation(fields: [authorId], references: [id])
  authorId        String @db.ObjectId

  // Post can have many comments
  comments        Comment[]
  likes           Like[]
}

model Comment {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  text            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Comment belongs to a user
  author          User @relation(fields: [authorId], references: [id])
  authorId        String @db.ObjectId

  // Comment belongs to a post
  post            Post @relation(fields: [postId], references: [id])
  postId           String @db.ObjectId

  // ... other fields
}

model Follower {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  follower        User @relation("FollowersFollower", fields: [followerId], references: [id])
  followerId      String @db.ObjectId
  following       User @relation("FollowersFollowing", fields: [followingId], references: [id])
  followingId     String @db.ObjectId

  @@unique([followerId, followingId])
}

model Like {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  user          User   @relation(fields: [userId], references: [id])
  userId        String @db.ObjectId
  likedPost     Post   @relation(fields: [likedPostId], references: [id])
  likedPostId   String @db.ObjectId
}
